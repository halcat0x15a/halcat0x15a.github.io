;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name evaluator.core, :imports nil, :requires {reader cljs.reader, cljs.reader cljs.reader}, :uses nil, :defs {self-evaluating? {:protocol-inline nil, :meta {:file "/Users/syoshida/halcat0x15a.github.io/src/main/cljs/evaluator/core.cljs", :line 4, :column 7, :end-line 4, :end-column 23, :arglists (quote ([exp]))}, :name evaluator.core/self-evaluating?, :variadic false, :file "src/main/cljs/evaluator/core.cljs", :end-column 23, :method-params ([exp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([exp]))}, eval-form {:name evaluator.core/eval-form, :file "src/main/cljs/evaluator/core.cljs", :line 10, :column 1, :end-line 10, :end-column 20, :meta {:file "/Users/syoshida/halcat0x15a.github.io/src/main/cljs/evaluator/core.cljs", :line 10, :column 11, :end-line 10, :end-column 20}}, eval {:protocol-inline nil, :meta {:file "/Users/syoshida/halcat0x15a.github.io/src/main/cljs/evaluator/core.cljs", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([env exp]))}, :name evaluator.core/eval, :variadic false, :file "src/main/cljs/evaluator/core.cljs", :end-column 11, :method-params ([env exp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env exp]))}, Procedure {:meta {:file "/Users/syoshida/halcat0x15a.github.io/src/main/cljs/evaluator/core.cljs", :line 30, :column 14, :end-line 30, :end-column 23, :doc nil, :protocol-symbol true, :protocol-info {:methods {app [[f args]]}}}, :protocol-symbol true, :name evaluator.core/Procedure, :file "src/main/cljs/evaluator/core.cljs", :end-column 23, :column 1, :line 30, :protocol-info {:methods {app [[f args]]}}, :info nil, :end-line 30, :impls #{evaluator.core/Lambda function}, :doc nil}, app {:protocol-inline nil, :meta {:file "/Users/syoshida/halcat0x15a.github.io/src/main/cljs/evaluator/core.cljs", :line 31, :column 4, :end-line 31, :end-column 7, :protocol evaluator.core/Procedure, :doc nil, :arglists (quote ([f args]))}, :protocol evaluator.core/Procedure, :name evaluator.core/app, :variadic false, :file "src/main/cljs/evaluator/core.cljs", :end-column 7, :method-params ([f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f args])), :doc nil}, Lambda {:num-fields 3, :protocols #{evaluator.core/Procedure}, :name evaluator.core/Lambda, :file "src/main/cljs/evaluator/core.cljs", :end-column 16, :type true, :column 10, :line 36, :record false, :end-line 36, :skip-protocol-flag nil}, ->Lambda {:protocol-inline nil, :meta {:file "/Users/syoshida/halcat0x15a.github.io/src/main/cljs/evaluator/core.cljs", :line 36, :column 10, :end-line 36, :end-column 16, :protocols #{evaluator.core/Procedure}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([env parameters body]))}, :protocols #{evaluator.core/Procedure}, :name evaluator.core/->Lambda, :variadic false, :file "src/main/cljs/evaluator/core.cljs", :end-column 16, :method-params ([env parameters body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env parameters body])), :skip-protocol-flag nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{body parameters :default lambda if env define begin quote :hierarchy}, :order [:hierarchy :default quote if define begin env parameters body lambda]}, :doc nil}